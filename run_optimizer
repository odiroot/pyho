#!/usr/bin/env python
import argparse
from optimizer import main


def optimizer_arguments():
    parser = argparse.ArgumentParser()
    parser.description = u"Genetic Algorithm optimizer for coil design."
    parser.epilog = u"""This application is a part of PyHO package."""

    # Run settings.
    parser.add_argument("-log", metavar="<logfile>", dest="logfile",
        type=str, help=u"log file path")
    parser.add_argument("-stopflag", metavar="<filename>", dest="stopflag",
        type=str, help=u"path to the stop-signalling file")
    parser.add_argument("-evaluator-path", metavar="<path>", dest="evaluator",
        type=str, help=u"Used only in local mode. Path to the evaluator"
            " launcher. If not specified block coil evaluator is assumed.")

    workers = parser.add_mutually_exclusive_group()
    workers.add_argument("-local-workers", metavar="<number>",
        dest="local_workers", type=int,
        help=u"Activates local computation mode with a specified number of"
            " workers. Uses IPC communication.")
    workers.add_argument("-remote-workers", metavar="<worker adresses>",
        dest="remote_workers", type=str, help=u"""
            A list of worker processes listening addresses e.g.:
            "host1,host2,host3" or
            "host1:pull_port:publish_port,host2:pull_port:publish_port"
            Pull port is used to receive tasks from manager process, it
            defaults to 5558.
            Publish port is used to send results back to manager process, it
            defaults to 5559.""")

    # Genetic Algorithm parameters.
    parser.add_argument("-seed", metavar="<value>", dest="seed",
        type=int, help=u"start the evolution with a specified random seed")
    parser.add_argument("-ngen", metavar="<value>", dest="ngen",
        type=int, help=u"number of GA generations to run")
    parser.add_argument("-popsize", metavar="<value>", dest="popsize",
        type=int, help=u"size of the GA population")
    parser.add_argument("-allele", action="store_true", dest="allele",
        help=u"Whether to use Allele operators", default=False)
    # Not much use right now.
    #parser.add_argument("-algorithm", dest="algorithm",
    #    choices=["GASimpleGA"], help=u"genetic algorithm engine")
    return parser


if __name__ == '__main__':
    args, unknown = optimizer_arguments().parse_known_args()
    main(args, unknown)
